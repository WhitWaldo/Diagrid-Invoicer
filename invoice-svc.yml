trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - /InvoiceService

variables:
  - name: ServiceName
    value: 'invoice-svc'
  - name: ProjectName
    value: InvoiceService
  - name: EcrUrlBase
    value: 211125601863.dkr.ecr.us-east-2.amazonaws.com # Retrieve from ECR instance > View Push Commands
  - name: EcrUrl
    value: '$(EcrUrlBase)/$(ServiceName)'
  - name: containerTag
    value: $(Build.SourceVersion)-$(Build.BuildId)

pool:
  name: AzureBuildServers
  demands:
    - Agent.OS -equals Linux

steps:
# Set the aws_access_key_id and aws_secret_access_key from IAM user console CLI wizard in ~/.aws/credentials on build server
# The user who the access key represents must have the AmazonEC2ContainreRegistryPowerUser permission policy at a minimum (AmazonEc2ContainerRegistryFullAccess preferred)
- script: docker build -t $(ServiceName) -f $(ProjectName)/Dockerfile .
  displayName: 'Build Docker Image'
- script: docker create $(ServiceName) $(ServiceName)
  displayName: 'Create Docker Container'
- script: docker tag $(ServiceName):latest $(EcrUrl):latest
  displayName: 'Tag container with ECR url'
- script: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $(EcrUrlBase)
  displayName: 'Log into AWS CLI'
- script: docker push $(EcrUrl):latest
  displayName: 'Push container into ECR'
- task: Docker@2
  displayName: 'Push container into ACR'
  inputs:
    containerRegistry: 'Azure Container Registry'
    repository: 'invoice-svc'
    command: 'buildAndPush'
    Dockerfile: '$(ProjectName)/Dockerfile'
    buildContext: '$(Build.SourcesDirectory)'
    tags: |
      latest
      $(containerTag)